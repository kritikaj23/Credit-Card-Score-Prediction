# -*- coding: utf-8 -*-
"""Credit_score prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12QrBuOWdk2VAWQxiDJ8whZdq0LqU2YnH
"""

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
pio.templates.default = "plotly_dark"

data=pd.read_csv("/content/TESTDATA.csv")

data.head()

data.info()

data.tail()

data.describe()

data.isnull().sum()

data["Credit_Score"].value_counts()

data.dtypes

data.drop_duplicates(keep = 'first', inplace = True)
print(data.shape)

data.columns

import seaborn as sns
sns.countplot(data['Credit_Score'])

data1 = data.drop(['ID', 'Customer_ID', 'Type_of_Loan', 'Month', 'Name', 'SSN'], axis=1)

data1.head()

data1.shape

fig=px.box(data1,x="Occupation",color="Credit_Score",title="Credit_score based on Occupation ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Annual_Income",x="Credit_Score",color="Credit_Score",title="Credit_score based on Annual_Income ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Annual_Income",x="Credit_Score",color="Credit_Score",title="Credit_score based on Annual_Income ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Monthly_Inhand_Salary",x="Credit_Score",color="Credit_Score",title="Credit_score based on Monthly_Inhand_Salary ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Num_Bank_Accounts",x="Credit_Score",color="Credit_Score",title="Credit_score based on Num_Bank_Accounts ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Num_Credit_Card",x="Credit_Score",color="Credit_Score",title="Credit_score based on Num_Credit_Card ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Interest_Rate",x="Credit_Score",color="Credit_Score",title="Credit_score based on Interest_Rate ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Num_of_Loan",x="Credit_Score",color="Credit_Score",title="Credit_score based on Num_of_Loan ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Delay_from_due_date",x="Credit_Score",color="Credit_Score",title="Credit_score based on Delay_from_due_date ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

fig=px.box(data1,y="Outstanding_Debt",x="Credit_Score",color="Credit_Score",title="Credit_score based on Outstanding_Debt ",
           color_discrete_map={'Good':'green','Standard':'Orange','Poor':'red'})
fig.show()

data1['Credit_Mix']=data1['Credit_Mix'].map({'Bad':0,'Standard':1,'Good':2})

from sklearn.model_selection import train_test_split

# Recreate feature set x with the one-hot encoded columns
x = np.array(data1[["Annual_Income", "Monthly_Inhand_Salary", "Num_Bank_Accounts",
                  "Num_Credit_Card", "Interest_Rate", "Num_of_Loan", "Delay_from_due_date",
                  "Outstanding_Debt", "Credit_Mix", "Credit_History_Age", "Monthly_Balance"
                ]])

y = np.array(data1["Credit_Score"])

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.33,random_state=42)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')
imputer.fit(X_train)
X_train_imputed = imputer.transform(X_train)
X_test_imputed = imputer.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X_train_imputed, y_train)

print("Credit_Score prediction")
a=float(input("Annual_Income: "))
b=float(input("Monthly_Inhand_Salary: "))
c=float(input("Num_Bank_Accounts: "))
d=float(input("Num_Credit_Card: "))
e=float(input("Interest_Rate: "))
f=float(input("Num_of_Loan: "))
g=float(input("Avg_Num_of_days: "))
h=float(input("Num_Delayed_payments: "))
i=int(input("Credit_Mix(Bad:0,Standard:1,Good:2): "))
j=float(input("Credit_History_Age: "))
k=float(input("Monthly_Balance: "))
l=float(input("Outstanding_Debt: "))

features=np.array([[a,b]])
print("Predicted_Credit_Score=",model.predict(features))

